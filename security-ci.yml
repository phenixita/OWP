# Tips

# Always check the Continue on error option of secure development build tasks.
# To run analysis after your build, keep the secure development build tasks after the publish build artifacts step of your build. So, your build can finish and post results before running analysis.
# Secure Development build tasks will fail if the tool fails to complete successfully but will NOT fail if/when the tool completes successfully and identifies issues in the code.
# You can configure your build to break when a tool identifies issues in the code; see Post Analysis below.
# One exception is the Antimalware task, which will fail if the tool completes and finds malware.

trigger: none


pool:
  name: MyLenovoP1

steps:
# ---------------------------------  Build
- task: GitVersion@5
  inputs:
    runtime: 'core'
    configFilePath: 'gitversion.yml'

- task: DotNetCoreCLI@2
  displayName: Restore packages
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'


- task: DotNetCoreCLI@2
  displayName: Build source code
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Debug /p:AssemblyVersion=$(GitVersion.SemVer) --output $(Build.ArtifactStagingDirectory)'


# ---------------------------------  Publish build artifact(s)

# ---------------------------------  Security Oriented Analysis 
- task: RoslynAnalyzers@2
  continueOnError: true
  inputs:
    userProvideBuildInfo: 'msBuildInfo'
    msBuildVersion: '16.0'
    msBuildArchitecture: 'x86'
    msBuildCommandline: '"$env:PROGRAMFILES\dotnet\dotnet.exe" build .\src\OwpPortal\owp-web.csproj'

- task: CredScan@2
  continueOnError: true
  inputs:
    toolMajorVersion: 'V2'
    outputFormat: 'sarif'

- task: Armory@2
  continueOnError: true
  inputs:
    targetDirectory: '$(Build.SourcesDirectory)'
    targetFiles: 'f|**\*.json;-|.gdn\**;'

- task: BinSkim@3
  continueOnError: true
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    AnalyzeTarget: '$(Build.ArtifactStagingDirectory)\owp*.dll'

# Provare le baseline!

# ---------------------------------  Misc Analysis

# ---------------------------------  Publishing MSCA reports/logs
- task: SdtReport@1
  continueOnError: true
  inputs:
    AllTools: true
    BinSkimBreakOn: 'WarningAbove'
    CodesignValidationBreakOn: 'WarningAbove'
    FxCopBreakOn: 'ErrorAbove'
    ModernCopBreakOn: 'WarningAbove'
    PoliCheckBreakOn: 'Severity4Above'
    RoslynAnalyzersBreakOn: 'WarningAbove'
    SemmleBreakOn: 'WarningAbove'
    TSLintBreakOn: 'WarningAbove'
    ToolLogsNotFoundAction: 'Standard'

- task: PublishSecurityAnalysisLogs@2
  condition: succeededOrFailed()
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'


# Position this task to run after all secure development build tasks, including after the Publish Security Analysis Results build task
# SecDevTools analysis tool build tasks will NOT fail based on results or issues identified in your code by the tool.
# The Post-Analysis build task will analyze the log files produced by the tools, and introduce a build break (the Post-Analysis task itself will fail) if/when there are findings (errors) detected by the tools.
- task: PostAnalysis@1
  inputs:
    AllTools: true
    BinSkimBreakOn: 'Error'
    CodesignValidationBreakOn: 'Error'
    FxCopBreakOn: 'ErrorAbove'
    ModernCopBreakOn: 'Error'
    PoliCheckBreakOn: 'Severity1'
    RoslynAnalyzersBreakOn: 'Error'
    SemmleBreakOn: 'Error'
    TSLintBreakOn: 'Error'
    ToolLogsNotFoundAction: 'Standard'